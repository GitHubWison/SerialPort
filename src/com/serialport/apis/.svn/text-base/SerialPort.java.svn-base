/*
 * Copyright 2009 Cedric Priscal
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */

package com.serialport.apis;

import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.util.Log;

public class SerialPort {

	private static final String TAG = SerialPort.class.getSimpleName();//"SerialPort";

	/*
	 * Do not remove or rename the field mFd: it is used by native method close();
	 */
	private FileDescriptor mFd;
	private FileInputStream mFileInputStream;
	private FileOutputStream mFileOutputStream;
	
	private SerialPortCallBack mCallback;
	private ReadThread mReadThread;
	private int nReadBufferSize=0;
	
	private boolean bOpenPort=false;
	
	public interface SerialPortCallBack{
		void onDataReceived(byte[] buffer, int size);
	}
	
	// Getters and setters
	public InputStream getInputStream() {
		return mFileInputStream;
	}

	public OutputStream getOutputStream() {
		return mFileOutputStream;
	}

	public SerialPort(SerialPortCallBack serialPortCallBack) {
		mCallback=serialPortCallBack;
	}
	
	public void openSerialPort(String devicepath, int baudrate, int flags,int readBufferSize) throws SecurityException, IOException {
		File device=new File(devicepath);
		
		/* Check access permission */
//		if (!device.canRead() || !device.canWrite()) {
//			try {
//				/* Missing read/write permission, trying to chmod the file */
//				Process su;
//				su = Runtime.getRuntime().exec("/system/bin/su");
//				String cmd = "chmod 666 " + device.getAbsolutePath() + "\n"+ "exit\n";
//				su.getOutputStream().write(cmd.getBytes());
//				
//				Log.d(TAG,"openSerialPort waitFor="+su.waitFor()+",canRead="+device.canRead()+",canWrite="+device.canWrite());
//				if ((su.waitFor() != 0) || !device.canRead()|| !device.canWrite()) {
//					Log.e(TAG,"openSerialPort SecurityException");
//					throw new SecurityException();
//				}
//			} catch (Exception e) {
//				e.printStackTrace();
//				Log.e(TAG,"openSerialPort SecurityException 2");
//				throw new SecurityException();
//			}
//		}

		Log.d(TAG,"open device="+device.getAbsolutePath()+",baudrate="+baudrate);
		mFd = open(device.getAbsolutePath(), baudrate, flags);
		if (mFd == null) {
			Log.e(TAG,"open serial port throw IOException");
			throw new IOException();
		}
		
		nReadBufferSize=readBufferSize;
		mFileInputStream = new FileInputStream(mFd);
		mFileOutputStream = new FileOutputStream(mFd);
		bOpenPort=true;
		
	}
	
	public void closeSerialPort() {
		stopReadThread();

		mFileInputStream=null;
		mFileOutputStream=null;
		
		if(bOpenPort){
			bOpenPort=false;
			close();
		}
		
		Log.d(TAG,"close serial port");
	}
	
	public void startReadThread(){
		stopReadThread();
		
		mReadThread=new ReadThread(); 
		if(mReadThread!=null) 
		{
			mReadThread.start();
			Log.d(TAG,"start ReadThread");
		}
	}
	
	public void stopReadThread(){
		if(mReadThread!=null){
			mReadThread.interrupt();
			Log.d(TAG,"stop ReadThread");
		}
		mReadThread=null;
	}

	public boolean isOpen(){
		return bOpenPort;
	}
	
	public void writeData(byte[] buffer){
		try {
			if(buffer==null || buffer.length==0){
				Log.e(TAG,"writeData buffer== null");
				return;
			}
			Log.d(TAG,"writeData buffer="+buffer);
			mFileOutputStream.write(buffer);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void writeData(String buffer){
		try {
			if(buffer==null){
				Log.e(TAG,"writeData buffer== null");
				return ;
			}
			mFileOutputStream.write(buffer.getBytes());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private class ReadThread extends Thread {

		@Override
		public void run() {
			super.run();
			Log.d(TAG,"ReadThread run");
			while(!isInterrupted()) {
				int size;
				try {
					byte[] buffer = new byte[nReadBufferSize];
					if (mFileInputStream == null)
					{
						Log.e(TAG,"mFileInputStream == null");
						return;
					}
					Log.d(TAG,"------------ReadThread");
					size = mFileInputStream.read(buffer);
					
					if (size > 0) {
						Log.d(TAG,"InputStream.read size="+size);
						if(mCallback!=null){
							mCallback.onDataReceived(buffer, size);
						}
					}
				} catch (IOException e) {
					e.printStackTrace();
					Log.e(TAG,"ReadThread throw IOException");
					return;
				}
			}
			Log.d(TAG,"ReadThread run end");
		}
	}
	
	public void freeSerialPort(){
		closeSerialPort();
		mCallback=null;
	}

	// JNI
	public native String  stringFromJNI();
	private native static FileDescriptor open(String path, int baudrate, int flags);
	public native void close();
	static {
		System.loadLibrary("serial_port");
	}
}
